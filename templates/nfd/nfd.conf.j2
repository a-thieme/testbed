log
{
  default_level INFO
  ndn.security.Validator TRACE
  ndn.security.ValidationState TRACE
}

tables
{
  {% if memsize <= 2 %}
    cs_max_packets 32768
  {% elif memsize <= 4 %}
    cs_max_packets 65536
  {% elif memsize <= 8 %}
    cs_max_packets 131072
  {% elif memsize > 8 %}
    cs_max_packets 262144
  {% endif %}

  cs_policy lru
  cs_unsolicited_policy drop-all

  strategy_choice
  {
    /               /localhost/nfd/strategy/best-route
    /localhost      /localhost/nfd/strategy/multicast
    /localhost/nfd  /localhost/nfd/strategy/best-route
    /ndn/broadcast  /localhost/nfd/strategy/multicast
  }

  network_region
  {
    {% for region in network_regions %}
      {{ region }}
    {% endfor %}
  }
}

face_system
{
  general
  {
    enable_congestion_marking yes
  }

  unix
  {
    path /run/nfd/nfd.sock
  }

  tcp
  {
    listen yes
    port {{tcp_port}}
    enable_v4 yes
    enable_v6 yes
  }

  udp
  {
    listen yes
    port {{udp_port}}
    enable_v4 yes
    enable_v6 yes

    idle_timeout 600
    unicast_mtu 1452

    mcast yes
    mcast_group 224.0.23.170
    mcast_port 56363
    mcast_group_v6 ff02::1234
    mcast_port_v6 56363
    mcast_ad_hoc no

    whitelist
    {
      *
    }
    blacklist
    {
    }
  }

  ether
  {
    listen no
    idle_timeout 600

    mcast yes
    mcast_group 01:00:5E:00:17:AA
    mcast_ad_hoc no

    whitelist
    {
      *
    }
    blacklist
    {
    }
  }

  websocket
  {
    listen yes
    port 9696
    enable_v4 yes
    enable_v6 yes
  }
}

authorizations
{
  authorize
  {
    certfile any
    privileges
    {
      cs
      faces
      fib
      strategy-choice
    }
  }
}

rib
{
  localhost_security
  {
    trust-anchor
    {
      type any
    }
  }

  localhop_security
  {
    rule
    {
      id "rib register command"
      for interest
      filter
      {
        type name
        regex ^<localhop><nfd><rib>[<register><unregister>]<>{1,3}$
      }
      checker
      {
        type customized
        sig-type ecdsa-sha256
        key-locator
        {
          type name
          regex ^<>*<KEY><>{1,3}$
        }
      }
    }
    rule
    {
      id "hierarchy"
      for data
      filter
      {
        type name
        regex ^<>*<KEY><>{3}$
      }
      checker
      {
        type customized
        sig-type ecdsa-sha256
        key-locator
        {
          type name
          hyper-relation
          {
            k-regex ^(<>*)<KEY><>{1,3}$
            k-expand \\1
            h-relation is-prefix-of
            p-regex ^(<>*)$
            p-expand \\1
          }
        }
      }
    }
    trust-anchor
    {
      type dir
      dir /keys/anchors
    }
  }

  readvertise_nlsr yes
}
